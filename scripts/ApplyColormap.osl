float rgba2gray(color RGBA)
{
    return ((RGBA[0] + RGBA[1] + RGBA[2]) / 3.0) * RGBA[3];
}

// We use 2 Color maps in here (one for landmass and one for water) since we don't know where the
// combined colormap would have its water proportion. 
// With a combined map we couldn't visualize the water depth since we need to map the height which has
// the range [0;1] to the range of the water portion of the color map (Which we might not know).

shader ApplyColormap(
                       string Colormap_land = "//moisturemap.png",
                       string Colormap_water = "//watermap.png",
                       float MinimumHeight = 0.0,
                       color HeightMap = 0.0,
                       color MoistureMap = 0.0,
                       output color OutputColor = 0.0
                       )
{

    //Use the water colormap and map the height which has the range [0; MinimumHeight]
    //to the range [0; 1] to utilize the full scale of the Watercolor map.
    if(rgba2gray(HeightMap) <= MinimumHeight){
        
        //Invert since the texture() function assigned the zeropoint to the upper left corner
        float ColoringHeight = 1-rgba2gray(HeightMap);
        
        //Map [0; MinimumHeight] to [0; 1]
        // y = (x - x_min) * ((y_max - y_min) / (x_max - x_min) ) + y_min
        ColoringHeight = ColoringHeight * (1/ MinimumHeight);
        
        //Safety check if MinimumHeight was bigger than 1
        if(ColoringHeight > 1){
            ColoringHeight = 1;
        }
        //OutputColor = texture(Colormap_water, rgba2gray(MoistureMap), ColoringHeight);
        OutputColor = texture(Colormap_water, 0, ColoringHeight);
    }
    
    //Use the land colormap and map the height which has the range ]MinimumHeight; 1]
    //to the range [0; 1] to utilize the full scale of the Landcolor map.
    else{
        //Invert since the texture() function assigned the zeropoint to the upper left corner
        float ColoringHeight = 1 - rgba2gray(HeightMap);
        
        //Map ]MinimumHeight; 1] to [0; 1]
        // y = (x - x_min) * ((y_max - y_min) / (x_max - x_min) ) + y_min
        ColoringHeight = (ColoringHeight - MinimumHeight) * (1 / (1 - MinimumHeight));
        //OutputColor = texture(Colormap_land, rgba2gray(MoistureMap), ColoringHeight);
        OutputColor = texture(Colormap_land, 0, ColoringHeight);
    }   
}